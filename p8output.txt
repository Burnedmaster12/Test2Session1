 gcc -g p8original.c;
 ./a.out;
enter the number of sides of the polygon
3
enter the points p1
12
14
enter the points p2
14
15
enter the points p1
15
16
enter the points p2
16
17
enter the points p1
17
18
enter the points p2
18
19
the perimeter of the polygon is as follows 5.064495
 gdb ./a.out;
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0xad5: file p8original.c, line 87.
(gdb) r
Starting program: /home/runner/Test2Session1/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8original.c:87
87  {
(gdb) s
89    int n=input_n();
(gdb) s
input_n () at p8original.c:21
21  {
(gdb) s
23    printf("enter the number of sides of the polygon\n");
(gdb) n
enter the number of sides of the polygon
24    scanf("%d",&n);
(gdb) n
3
25    return n;
(gdb) n
26  }
(gdb) n
main () at p8original.c:90
90    input_polygon(n,&p);
(gdb) s
input_polygon (n=3, p=0x7ffef755e7c0) at p8original.c:71
71    p->n=n;
(gdb) n
72    input_n_lines(n,p->l);
(gdb) n
enter the points p1
12
14
enter the points p2
14
15
enter the points p1
15
16
enter the points p2
16
17
enter the points p1
17
18
enter the points p2
18
19
73  }
(gdb) n
main () at p8original.c:91
91    find_perimeter(n,&p);
(gdb) s
find_perimeter (n=3, p=0x7ffef755e7c0) at p8original.c:76
76    p->perimeter=0;
(gdb) s
77    for (int i=0;i<n;i++)
(gdb) n
79        p->perimeter=p->perimeter + p->l[i].distance;
(gdb) n
77    for (int i=0;i<n;i++)
(gdb) n
79        p->perimeter=p->perimeter + p->l[i].distance;
(gdb) n
77    for (int i=0;i<n;i++)
(gdb) n
79        p->perimeter=p->perimeter + p->l[i].distance;
(gdb) n
77    for (int i=0;i<n;i++)
(gdb) n
81  }
(gdb) n
main () at p8original.c:92
92    output(&p);
(gdb) s
output (p=0x7ffef755e7c0) at p8original.c:84
84    printf("the perimeter of the polygon is as follows %f\n",p->perimeter);
(gdb) n
the perimeter of the polygon is as follows 5.064495
85  }
(gdb) n
main () at p8original.c:93
93    return 0;
(gdb) n
94  }(gdb) continue
Continuing.
[Inferior 1 (process 1098) exited normally]
(gdb) p
The history is empty.
(gdb) c
The program is not being run.
(gdb) l
89    int n=input_n();
90    input_polygon(n,&p);
91    find_perimeter(n,&p);
92    output(&p);
93    return 0;
94  }(gdb) 
